"""
dog_testers_data_analysis
DAG auto-generated by Astro Cloud IDE. Try Astro for free: astronomer.io/try-astro.
It uses the Astro Python SDK for most of its tasks.
Learn more at: https://astro-sdk-python.readthedocs.io/en/stable/index.html 
"""

from airflow.decorators import dag
from astro import sql as aql
from astro.table import Table
import pandas as pd
from pendulum import datetime
import pandas as pd
from airflow.models.baseoperator import chain
from astronomer.providers.snowflake.sensors.snowflake import SnowflakeSensorAsync
import os

SNOWFLAKE_CONN_ID = os.getenv("SNOWFLAKE_CONN_ID", "snowflake_de_team")


@aql.run_raw_sql(
    conn_id="snowflake_de_team",
    task_id="ingest_tester_dogs_table",
    results_format="pandas_dataframe",
)
def ingest_tester_dogs_table_func():
    return """
    SELECT * 
    FROM TESTER_DOGS_TABLE 
    WHERE PRODUCT1 = 'Carrot Plushy' OR PRODUCT2 = 'Carrot Plushy'
    """


@aql.dataframe(task_id="average_dog_age_carrot_dogs")
def average_dog_age_carrot_dogs_func(ingest_tester_dogs_table: pd.DataFrame):
    return ingest_tester_dogs_table["age"].mean()


@aql.transform(conn_id="snowflake_de_team", task_id="calculate_product_treats_total")
def calculate_product_treats_total_func():
    return """
    SELECT PRODUCT, SUM(TREATS) as TOTAL_TREATS 
    FROM (
        SELECT PRODUCT1 as PRODUCT, TREATS 
        FROM TESTER_DOGS_TABLE 
        UNION ALL 
        SELECT PRODUCT2 as PRODUCT, TREATS 
        FROM TESTER_DOGS_TABLE
    ) 
    GROUP BY PRODUCT
    """


@aql.run_raw_sql(
    conn_id="snowflake_de_team",
    task_id="sum_total_treats",
    results_format="pandas_dataframe",
)
def sum_total_treats_func(calculate_product_treats_total: Table):
    return """
    SELECT SUM(total_treats) 
    FROM {{calculate_product_treats_total}}
    """


@aql.dataframe(task_id="print_results")
def print_results(
    average_dog_age_carrot_dogs: pd.DataFrame,
    calculate_product_treats_total: pd.DataFrame,
    sum_total_treats: pd.DataFrame,
):
    print(
        f"{average_dog_age_carrot_dogs} years was the average age of dogs who tested the Carrot Plushy."
    )
    print(f"In total {sum_total_treats} treats were given out to tester dogs.")
    print(
        f"That amounts to the following list of treats per product: {calculate_product_treats_total}"
    )


default_args = {
    "owner": "Dog Fact",
    "retries": 3,
}


@dag(
    default_args=default_args,
    schedule="0 0 * * *",
    start_date=datetime(2024, 1, 31),
    catchup=False,
    owner_links={
        "Dog Fact": "https://dog-api.kinduff.com/api/facts?number=1",
    },
    tags=["Cloud IDE", "Analysis", "HappyWoofs"],
)
def dog_testers_data_analysis():
    wait_for_table_tester_dogs_to_have_carrot_testers = SnowflakeSensorAsync(
        task_id="wait_for_table_tester_dogs_to_have_carrot_testers",
        sql="SELECT * FROM TESTER_DOGS_TABLE WHERE PRODUCT1 = 'Carrot Plushy' OR PRODUCT2 = 'Carrot Plushy'",
        snowflake_conn_id=SNOWFLAKE_CONN_ID,
    )

    ingest_tester_dogs_table = ingest_tester_dogs_table_func()

    average_dog_age_carrot_dogs = average_dog_age_carrot_dogs_func(
        ingest_tester_dogs_table,
    )

    calculate_product_treats_total = calculate_product_treats_total_func()

    sum_total_treats = sum_total_treats_func(
        calculate_product_treats_total,
    )

    chain(
        wait_for_table_tester_dogs_to_have_carrot_testers,
        ingest_tester_dogs_table,
        average_dog_age_carrot_dogs,
    )

    print_results(
        average_dog_age_carrot_dogs,
        calculate_product_treats_total,
        sum_total_treats,
    )


dag_obj = dog_testers_data_analysis()
